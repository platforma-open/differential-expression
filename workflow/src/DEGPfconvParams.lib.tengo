ll := import("@platforma-sdk/workflow-tengo:ll")

getColumns := func(countsSpec, blockId, species) {
	return {
		axes: [
			{
				column: "Contrast",
				id: "contrast",
				allowNA: false,
				spec: {
					name: "pl7.app/rna-seq/contrastGroup",
					type: "String",
					domain: {
						"pl7.app/blockId": blockId
					},
					annotations: {
						"pl7.app/label": "Contrast"
					}
				}
			},
			{
				column: "EnsemblId",
				spec: countsSpec.axesSpec[1]
			}
			],
		columns: [
			{
				column: "SYMBOL",
				id: "genesymbol",
				allowNA: true,
				spec: {
					name: "pl7.app/rna-seq/genesymbol",
					valueType: "String",
					annotations: {
						"pl7.app/label": "Gene symbol",
						"pl7.app/table/orderPriority": "80"
					}
				}
			},
			{
				column: "log2FoldChange",
				id: "log2foldchange",
				allowNA: true,
				spec: {
					name: "pl7.app/rna-seq/DEG",
					domain: {
						"pl7.app/species": species
					},
					valueType: "Double",
					annotations: {
						"pl7.app/label": "Log2FC",
						"pl7.app/table/hValue": "true",
						// This allows us to select this Pcolumn to use it as filtering
						// in this case to keep only genes appearing in this list
						"pl7.app/isSubset": "true"
					}
				}
			},
			{
				column: "Regulation",
				id: "regulationDirection",
				spec: {
					name: "pl7.app/rna-seq/regulationDirection",
					domain: {
						"pl7.app/species": species
					},
					valueType: "String",
					annotations: {
						"pl7.app/label": "Regulation direction (Up\\Down\\NS)",
						"pl7.app/table/orderPriority": "5"
					}
				}
			}
			],
		storageFormat: "Binary",
		partitionKeyLength: 1
	}
}

export ll.toStrict({
	getColumns: getColumns
})
