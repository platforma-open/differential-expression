// Differential Expression
//
// Expected arguments:
//	- ref: Ref				- a reference to the raw counts PColumn
//
// Output:
//	- topTable: p-frame		- DESeq2 results toptable with gene symbol annotation p-frame
//



wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
topTablePfconvParamsLib := import(":topTablePfconvParams")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
text := import("text")
ll := import("@platforma-sdk/workflow-tengo:ll")


wf.prepare(func(args){

	// below solution not working currently
	metaRefs := {}

	i := 0
	for metaRef in args.covariateRefs {
		metaRefs["metaRef" + i ] = wf.resolve(metaRef, { errIfMissing: true })
		i = i + 1
	}

	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true }),
		resolvedContrastFactor: wf.resolve(args.contrastFactor),
		metaRefs: metaRefs 
	}
})

wf.body(func(args) {

	//blockId := wf.blockId().getDataAsJson()

	rawCounts := args.resolvedInput
	countsSpec := rawCounts.spec

	contrastFactor := args.resolvedContrastFactor
	numerator := args.numerator
	denominator := args.denominator

	species := countsSpec.domain["pl7.app/species"]
	
	covariates := []

	for _, v in args.metaRefs {
		covariates = append(covariates, v)
	}

	// convert PColumns to csv
	csvCounts := xsv.exportFrame([rawCounts], "csv", {})
	csvCovariates := xsv.exportFrame(covariates, "csv", {})

	diffExpression := exec.builder().
		cmd("Rscript").
		arg("/Users/aiturbide/Blocks/differential-expression/scripts/run_DESeq2.R").
		arg("-c").arg("rawCounts.csv").
		arg("-m").arg("covariates.csv").
		arg("-t").arg(contrastFactor.spec.annotations["pl7.app/label"]). // ??
		arg("-n").arg(numerator).
		arg("-d").arg(denominator).
		arg("-s").arg(species).
		arg("-o").arg("topTable.csv").
		addFile("rawCounts.csv", csvCounts).
		addFile("covariates.csv", csvCovariates).
		saveFile("topTable.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	topTableImportParams := topTablePfconvParamsLib.getColumns(countsSpec)
	topTablePf := xsv.importFile(diffExpression.getFile("topTable.csv"), "csv", topTableImportParams)

	return {
		outputs: {
			topTablePf: pframes.exportFrame(topTablePf)
		},
		exports: {}
	}
})
