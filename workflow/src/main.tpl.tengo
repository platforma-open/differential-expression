// Differential Expression
//
// Expected arguments:
//	- ref: Ref				- a reference to the raw counts PColumn
//
// Output:
//	- topTable: p-frame		- DESeq2 results toptable with gene symbol annotation p-frame
//



wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
ll := import("@platforma-sdk/workflow-tengo:ll")
render := import("@platforma-sdk/workflow-tengo:render")

pfErrorLogsConv := import(":pf-de-errors-conv")
diffAnalysisTpl := assets.importTemplate(":diffAnalysis")

wf.prepare(func(args){

	// below solution not working currently
	metaRefs := {}

	i := 0
	for metaRef in args.covariateRefs {
		metaRefs["metaRef" + i ] = wf.resolve(metaRef, { errIfMissing: true })
		i = i + 1
	}

	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true }),
		resolvedContrastFactor: wf.resolve(args.contrastFactor),
		metaRefs: metaRefs 
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()

	rawCounts := args.resolvedInput
	countsSpec := rawCounts.spec
	contrastFactor := args.resolvedContrastFactor
	denominator := string(args.denominator)
	log2FCThreshold := args.log2FCThreshold
	pAdjThreshold := args.pAdjThreshold

	// Set default conversion memory and CPU
	defaultConvMem := "16GiB"
	defaultConvCpu := 1

	covariates := []
	for _, v in args.metaRefs {
		covariates = append(covariates, v)
	}

	// convert PColumns to csv
	csvCovariates := xsv.exportFrame(covariates, "csv", { mem: defaultConvMem, cpu: defaultConvCpu })
	
	// Run script to check if metadata matrix will be full rank
	continueCheck := exec.builder().
			software(assets.importSoftware("@platforma-open/milaboratories.run-deseq2-r.software:prev-checks")).
			arg("--output").arg(".").
			arg("--metadata").arg("covariates.csv").
			addFile("covariates.csv", csvCovariates).
			arg("--contrast_factor").arg(contrastFactor.spec.annotations["pl7.app/label"]).
			arg("--error_output").arg("./errorLogs.csv").
			saveFileContent("continueOrNot.txt").
			saveFile("errorLogs.csv").
			cache(24 * 60 * 60 * 1000).
			run()

	// This content is resolved in a sub-template only
	continueOrNot := continueCheck.getFileContent("continueOrNot.txt")

	errorLogsImportParams := pfErrorLogsConv.getColumns()
	errorLogsPf := xsv.importFile(continueCheck.getFile("errorLogs.csv"), "csv", errorLogsImportParams, { mem: defaultConvMem, cpu: defaultConvCpu })

	// Run differential analysis template
	// Analysis will only run if matrix is full rank (continueOrNot.txt content == "continue")
	diffAnalysis := render.create(diffAnalysisTpl, {
		continueOrNot: continueOrNot,
		rawCounts: rawCounts,
		csvCovariates: csvCovariates,
		numerators: args.numerators,
		contrastFactor: contrastFactor,
		params: {
			denominator: denominator,
			log2FCThreshold: log2FCThreshold,
			pAdjThreshold: pAdjThreshold,
			defaultConvMem: defaultConvMem,
			defaultConvCpu: defaultConvCpu
		},
		metaInputs: {
			blockId: blockId
		}
	})
	
	// Gather results from continueCheck template
	degPF := diffAnalysis.output("degPF", 24 * 60 * 60 * 1000)
	regDirPF := diffAnalysis.output("regDirPF", 24 * 60 * 60 * 1000)
	topDegPF := diffAnalysis.output("topDegPF", 24 * 60 * 60 * 1000)
	contrastExport := diffAnalysis.output("contrastExport", 24 * 60 * 60 * 1000)
	
	exports := {
		DEG: degPF,
		regDir: regDirPF,
		contrastExport: contrastExport
	}
	outputs := {
		topTablePf: topDegPF,
		errorLogs: pframes.exportFrame(errorLogsPf)
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
