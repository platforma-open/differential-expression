// run annotation and DE analysis
self := import("@platforma-sdk/workflow-tengo:tpl")
smart := import("@platforma-sdk/workflow-tengo:smart")
ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
topTablePfconvParamsLib := import(":topTablePfconvParams")
DEGPfconvParamsLib := import(":DEGPfconvParams")
pt := import("@platforma-sdk/workflow-tengo:pt")


self.validateInputs({
	"__options__,closed": "",
	continueOrNot: "any",
	rawCounts: "any",
	csvCovariates: "any",
	numerators: "any",
	contrastFactor: "any",
	params: {
		"__options__,closed": "",
		"denominator,omitempty": "string",
		"log2FCThreshold,omitempty": "number",
		"pAdjThreshold,omitempty": "number",
		"blockId,omitempty": "string"
	}
})

self.defineOutputs("degPF", "regDirPF", "topDegPF")

self.body(func(inputs) {
	degPF := {}
	topDegPF := {}
	regDirPF := {}

	
	if string(inputs.continueOrNot.getData()) != "continue" {
		// If matrix is not full rank return empty objects
		return {
			degPF: degPF,
			regDirPF: regDirPF,
			topDegPF: topDegPF
		}

	} else {
		// Proceed only if metadata matrix is full rank
		
		countsSpec := inputs.rawCounts.spec
		// @TODO: look for species only in axis when old Star version get obsolete
		species := countsSpec.domain["pl7.app/species"]
		// Last Star version holds species ID in axis domain
		if species == undefined {
			species = countsSpec.axesSpec[1].domain["pl7.app/species"]
		}

		// convert PColumns to csv
		csvCounts := xsv.exportFrame([inputs.rawCounts], "csv", {})

		// Create PFrames for DEG, regulation direction and topTable
		wf := pt.workflow().cpu(1).mem("2GiB")
		dfsDeg := []
		dfsTopTable := []
		for numerator in inputs.numerators {
			numerator = string(numerator)
			diffExpression := exec.builder().
				software(assets.importSoftware("@platforma-open/milaboratories.run-deseq2-r.software:deseq2")).
				arg("-c").arg("rawCounts.csv").
				arg("-m").arg("covariates.csv").
				arg("-t").arg(inputs.contrastFactor.spec.annotations["pl7.app/label"]). // ??
				arg("-n").arg(numerator).
				arg("-d").arg(inputs.params.denominator).
				arg("-s").arg(species).
				arg("-o").arg("topTable.csv").
				arg("-f").arg(string(inputs.params.log2FCThreshold)).
				arg("-p").arg(string(inputs.params.pAdjThreshold)).
				addFile("rawCounts.csv", csvCounts).
				addFile("covariates.csv", inputs.csvCovariates).
				saveFile("topTable.csv").
				saveFile("DEG.csv").
				printErrStreamToStdout().
				saveStdoutContent().
				cache(24 * 60 * 60 * 1000).
				run()

			dfsDeg += [wf.frame(diffExpression.getFile("DEG.csv"), {xsvType: "csv"})]
			dfsTopTable += [wf.frame(diffExpression.getFile("topTable.csv"), {xsvType: "csv"})]

		}

		// Concatenate all DEG and topTable files
		concatenatedDeg := pt.concat(dfsDeg)
		concatenatedDeg.save("concatenated_output_Deg.csv")
		concatenatedTopTable := pt.concat(dfsTopTable)
		concatenatedTopTable.save("concatenated_output_topTable.csv")
		ptablerResult := wf.run()

		topTableImportParams := topTablePfconvParamsLib.getColumns(countsSpec,
																inputs.params.log2FCThreshold,
																inputs.params.pAdjThreshold)
		topTablePf := xsv.importFile(ptablerResult.getFile("concatenated_output_topTable.csv"), "csv", topTableImportParams, 
															// This changes output format from default to per column
															// So key will be column name and values spec and data
															{splitDataAndSpec: true})

		// Add DEG export with specific import params. Adding new csv output to script with only DEGs and logFC
		DEGImportParams := DEGPfconvParamsLib.getColumns(countsSpec, inputs.params.blockId, species)
		DEGPf := xsv.importFile(ptablerResult.getFile("concatenated_output_Deg.csv"), "csv", DEGImportParams)

		trace := pSpec.makeTrace(countsSpec,
			{type: "milaboratories.differential-expression", importance: 30, 
			label: "DEG - Denominator: " + inputs.params.denominator + " (log2FC: " + inputs.params.log2FCThreshold + ", pAdj: " + inputs.params.pAdjThreshold + ")"}
		)

		degPFrameBuilder := pframes.pFrameBuilder()
		regDirPFrameBuilder := pframes.pFrameBuilder()
		topDegPFrameBuilder := pframes.pFrameBuilder()

		for columnName, value in topTablePf { 
			// avoid modifying the original spec
			columnData := value.data
			topDegPFrameBuilder.add(
				columnName,
				trace.inject(value.spec),
				columnData

			)
		}

		degPFrameBuilder.add(
			"Log2FC",
			trace.inject(DEGPf["log2foldchange.spec"]),
			DEGPf["log2foldchange.data"]
		)

		regDirPFrameBuilder.add(
			"Regulation Direction",
			trace.inject(DEGPf["regulationDirection.spec"]),
			DEGPf["regulationDirection.data"]
		)
		

		// Build the final PFrames
		degPF = degPFrameBuilder.build()
		topDegPF = topDegPFrameBuilder.build()
		regDirPF = regDirPFrameBuilder.build()

		return {
			degPF: degPF,
			regDirPF: regDirPF,
			topDegPF: pframes.exportFrame(topDegPF)
		}
	} 
})
