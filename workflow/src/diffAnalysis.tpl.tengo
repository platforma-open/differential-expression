// get preset

self := import("@platforma-sdk/workflow-tengo:tpl")
smart := import("@platforma-sdk/workflow-tengo:smart")
ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
topTablePfconvParamsLib := import(":topTablePfconvParams")
DEGPfconvParamsLib := import(":DEGPfconvParams")



self.validateInputs({
	"__options__,closed": "",
	continueOrNot: "any",
	rawCounts: "any",
	csvCovariates: "any",
	numerators: "any",
	contrastFactor: "any",
	params: {
		"__options__,closed": "",
		"denominator,omitempty": "string",
		"log2FCThreshold,omitempty": "number",
		"pAdjFCThreshold,omitempty": "number"
	}
})

self.defineOutputs("degPF", "regDirPF", "topDegPF")

self.body(func(inputs) {
	degPF := undefined
	topDegPF := undefined
	regDirPF := undefined

	// Proceed only if metadata matrix is full rank
	if string(inputs.continueOrNot.getData()) == "continue" {

		countsSpec := inputs.rawCounts.spec
		// @TODO: look for species only in axis when old Star version get obsolete
		species := countsSpec.domain["pl7.app/species"]
		// Last Star version holds species ID in axis domain
		if species == undefined {
			species = countsSpec.axesSpec[1].domain["pl7.app/species"]
		}

		// convert PColumns to csv
		csvCounts := xsv.exportFrame([inputs.rawCounts], "csv", {})

		degPFrameBuilder := pframes.pFrameBuilder()
		regDirPFrameBuilder := pframes.pFrameBuilder()
		topDegPFrameBuilder := pframes.pFrameBuilder()

		for numerator in inputs.numerators {
			diffExpression := exec.builder().
				software(assets.importSoftware("@platforma-open/milaboratories.run-deseq2-r.software:deseq2")).
				arg("-c").arg("rawCounts.csv").
				arg("-m").arg("covariates.csv").
				arg("-t").arg(inputs.contrastFactor.spec.annotations["pl7.app/label"]). // ??
				arg("-n").arg(numerator).
				arg("-d").arg(inputs.params.denominator).
				arg("-s").arg(species).
				arg("-o").arg("topTable.csv").
				arg("-f").arg(string(inputs.params.log2FCThreshold)).
				arg("-p").arg(string(inputs.params.pAdjFCThreshold)).
				addFile("rawCounts.csv", csvCounts).
				addFile("covariates.csv", inputs.csvCovariates).
				saveFile("topTable.csv").
				saveFile("DEG.csv").
				printErrStreamToStdout().
				saveStdoutContent().
				cache(24 * 60 * 60 * 1000).
				run()

			topTableImportParams := topTablePfconvParamsLib.getColumns(countsSpec,
																	inputs.params.log2FCThreshold,
																	inputs.params.pAdjFCThreshold)
			topTablePf := xsv.importFile(diffExpression.getFile("topTable.csv"), "csv", topTableImportParams, 
																// This changes output format from default to per column
																// So key will be column name and values spec and data
																{splitDataAndSpec: true})

			// Add DEG export with specific import params. Adding new csv output to script with only DEGs and logFC
			DEGImportParams := DEGPfconvParamsLib.getColumns(countsSpec)
			DEGPf := xsv.importFile(diffExpression.getFile("DEG.csv"), "csv", DEGImportParams)

			trace := pSpec.makeTrace(countsSpec,
				{type: "milaboratories.differential-expression", importance: 30, 
				label: "DEG - " + numerator + "/" + inputs.params.denominator + " (log2FC: " + inputs.params.log2FCThreshold + ", pAdj: " + inputs.params.pAdjFCThreshold + ")"}
			)

			for columnName, value in topTablePf { 
				columnSpec := value.spec
				columnSpec.axesSpec[0].domain["pl7.app/comparison"] = numerator + " - vs - " + inputs.params.denominator
				columnData := value.data
				topDegPFrameBuilder.add(
					numerator + " - " + columnName,
					trace.inject(columnSpec),
					columnData

				)
			}

			degPFrameBuilder.add(
				numerator,
				trace.inject({
					kind: "PColumn",
					name: "pl7.app/rna-seq/DEG",
					domain: {
						"pl7.app/species": species
					},
					valueType: "Double",
					annotations: {
						"pl7.app/label": numerator + " vs " + inputs.params.denominator + " (log2FC)",
						"pl7.app/table/hValue": "true",
						// This allows us to select this Pcolumn to use it as filtering
						// in this case to keep only genes appearing in this list
						"pl7.app/isSubset": "true"
					},
					axesSpec: [
						{
							"name": "pl7.app/rna-seq/geneId",
							"type": "String",
							"domain": {
								"pl7.app/species": species
							},
							"annotations": {
								"pl7.app/label": "Ensembl Id"
								// "pl7.app/graph/axis/highCardinality": "true"
							}
						}
						]
				}),
				DEGPf["log2foldchange.data"]
			)

			regDirPFrameBuilder.add(
				numerator,
				trace.inject({
					kind: "PColumn",
					name: "pl7.app/rna-seq/regulationDirection",
					domain: {
						"pl7.app/species": species
					},
					valueType: "String",
					annotations: {
						"pl7.app/label": numerator + " vs " + inputs.params.denominator + " (UP\\Down-regulated gene list)"

					},
					axesSpec: [
						{
							"name": "pl7.app/rna-seq/geneId",
							"type": "String",
							"domain": {
								"pl7.app/species": species
							},
							"annotations": {
								"pl7.app/label": "Ensembl Id"
								// "pl7.app/graph/axis/highCardinality": "true"
							}
						}
						]
				}),
				DEGPf["regulationDirection.data"]
			)
		}

		// Build the final PFrames
		degPF = degPFrameBuilder.build()
		topDegPF = topDegPFrameBuilder.build()
		regDirPF = regDirPFrameBuilder.build()
	}
	

	// run al deseq part and return what was sent to exports there
	return {
		degPF: degPF,
		regDirPF: regDirPF,
		topDegPF: topDegPF
	}
})
